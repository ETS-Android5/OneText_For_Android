import java.nio.file.Paths

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileOptions.encoding = 'UTF-8'
    compileSdkVersion 31
    buildToolsVersion '31.0.0'
    defaultConfig {
        Date date = new Date()
        applicationId "com.lz233.onetext"
        minSdkVersion 23
        targetSdkVersion 31
        versionCode = date.format("yyyyMMdd").toInteger()
        versionName = '1.93-ã‚€'
        if (System.getenv("APPCENTER_ANDROID_VARIANT") != null) {
            writeStringToFile("app", "VERSION_NAME", versionName)
            writeStringToFile("app", "VERSION_CODE", String.valueOf(versionCode))
        }
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        //multiDexEnabled true
    }
    signingConfigs {
        releaseSigningConfig {
            storeFile rootProject.file("app/lz233_key.jks")
            //storePassword System.getProperty("KEYSTORE_PASSWORD")
            storePassword System.getenv("KEYSTORE_PASSWORD")
            keyAlias System.getenv("KEY_ALIAS")
            keyPassword System.getenv("KEY_PASSWORD")
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            zipAlignEnabled true
            //shrinkResources true
            signingConfig signingConfigs.releaseSigningConfig
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        coolapk {
            minifyEnabled true
            zipAlignEnabled true
            //shrinkResources true
            signingConfig signingConfigs.releaseSigningConfig
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        GooglePlay {
            minifyEnabled true
            zipAlignEnabled true
            //shrinkResources true
            signingConfig signingConfigs.releaseSigningConfig
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        exclude 'META-INF/**'
        exclude 'kotlin/**'
        exclude 'okhttp3/**'
        exclude 'org/**'
        exclude '**.properties'
        exclude '**.bin'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //implementation project(':lawnchair')
    implementation 'com.microsoft.appcenter:appcenter-analytics:4.2.0'
    implementation 'com.microsoft.appcenter:appcenter-crashes:4.2.0'
    implementation 'com.zqc.opencc.android.lib:lib-opencc-android:1.1.0'
    //implementation 'com.takisoft.fix:preference-v7-simplemenu:28.0.0.0'
    //implementation 'com.liulishuo.okdownload:okdownload:1.0.7'
    //implementation 'com.liulishuo.okdownload:okhttp:1.0.7'
    implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.2'
    implementation 'com.kd.easybarrage:library:0.0.1'
    implementation 'io.noties.markwon:core:4.6.2'
    implementation 'io.noties.markwon:ext-tasklist:4.6.2'
    implementation 'io.noties.markwon:ext-strikethrough:4.6.2'
    implementation 'com.github.warkiz.widget:indicatorseekbar:2.1.2'
    implementation 'io.reactivex.rxjava3:rxjava:3.0.13'
    implementation 'org.reactivestreams:reactive-streams:1.0.3'
    //implementation 'com.yanzhenjie:permission:2.0.3'
    implementation 'pub.devrel:easypermissions:3.0.0'
    implementation 'io.github.inflationx:calligraphy3:3.1.1'
    implementation 'io.github.inflationx:viewpump:2.0.3'
    implementation 'commons-codec:commons-codec:20041127.091804'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.viewpager2:viewpager2:1.0.0'
    //implementation 'androidx.multidex:multidex:2.0.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'com.google.zxing:core:3.4.1'
    //implementation 'androidx.navigation:navigation-fragment:2.2.1'
    //implementation 'androidx.navigation:navigation-ui:2.2.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    implementation 'androidx.documentfile:documentfile:1.0.1'
    compileOnly 'de.robv.android.xposed:api:82'
}

private static void writeStringToFile(String dir, String fileName, String string) {
    FileWriter fileWriter = new FileWriter(new File(dir, fileName))
    fileWriter.write(string)
    fileWriter.close()
}

//https://github.com/LSPosed/LSPosed/blob/02b4ba01d83735d4a7db60ae4fc35c57ebc2d07c/app/build.gradle#L84
def optimizeReleaseRes = task('optimizeReleaseRes').doLast {
    def aapt2 = Paths.get(project.android.sdkDirectory.path, 'build-tools', project.android.buildToolsVersion, 'aapt2')
    def zip = Paths.get(project.buildDir.path, 'intermediates',
            'processed_res', 'release', 'out', "resources-release.ap_")
    def optimized = new File("${zip}.opt")
    def cmd = exec {
        commandLine aapt2, 'optimize', '--collapse-resource-names',
                '--shorten-resource-paths',
                '-o', optimized, zip
        ignoreExitValue false
    }
    if (cmd.exitValue == 0) {
        delete(zip)
        optimized.renameTo("$zip")
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == 'processReleaseResources') {
        task.finalizedBy optimizeReleaseRes
    }
}